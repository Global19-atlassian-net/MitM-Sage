<omdoc xmlns="http://omdoc.org/ns" xmlns:om="http://www.openmath.org/OpenMath"><theory name="element_class" base="http://www.sagemath.org/content/classes/magmas/Magmas" meta="http://www.sagemath.org/?Types"><import from="http://www.sagemath.org/?Axioms"></import><import from="http://www.sagemath.org/?Structures"></import><omdoc name="Methods"><constant name="classmethod._mul_">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMA>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
            Product of two elements

            INPUT:

            - ``self``, ``right`` -- two elements with the same parent

            OUTPUT:

            - an element of the same parent

            EXAMPLES::

                sage: S = Semigroups().example(&quot;free&quot;)
                sage: x = S('a'); y = S('b')
                sage: x._mul_(y)
                'ab'
            </opaque><constant name="classmethod._mul_parent">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMA>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><opaque format="text">_mul_parent(self, other)
File: sage/categories/coercion_methods.pyx (starting at line 15)

    Return the product of the two elements, calculated using
    the ``product`` method of the parent.

    This is inserted by :meth:`Magmas.ParentMethods.__init_extra__` as
    default implementation of ``Magmas.ElementMethods._mul_`` if
    ``product`` is implemented in the parent.

    INPUT:

    - ``other`` -- an element of the parent of ``self``

    OUTPUT:

    - an element of the parent of ``self``

    EXAMPLES::

        sage: S = Semigroups().example(&quot;free&quot;)
        sage: x = S('a'); y = S('b')
        sage: x._mul_parent(y)
        'ab'

    .. SEEALSO::

        - :meth:`Magmas.ElementMethods._mul_parent`
        - :meth:`Magmas.ElementMethods.__init_extra__`
        - :meth:`Magmas.ParentMethods.product`

    This is :meth:`Magmas.ElementMethods._mul_parent`, implemented as
    a Cython method in :mod:`sage.categories.coercion_methods`::

        sage: x._mul_parent.im_func is Magmas.ElementMethods._mul_parent.im_func
        True
        sage: x._mul_parent.im_func is sage.categories.coercion_methods._mul_parent
        True
    </opaque><constant name="classmethod.is_idempotent">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
            Test whether ``self`` is idempotent.

            EXAMPLES::

                sage: S = Semigroups().example(&quot;free&quot;); S
                An example of a semigroup: the free semigroup generated by ('a', 'b', 'c', 'd')
                sage: a = S('a')
                sage: a^2
                'aa'
                sage: a.is_idempotent()
                False

            ::

                sage: L = Semigroups().example(&quot;leftzero&quot;); L
                An example of a semigroup: the left zero semigroup
                sage: x = L('x')
                sage: x^2
                'x'
                sage: x.is_idempotent()
                True

            </opaque></omdoc></theory></omdoc>