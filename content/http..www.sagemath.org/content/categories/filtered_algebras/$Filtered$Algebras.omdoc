<omdoc xmlns="http://omdoc.org/ns" xmlns:om="http://www.openmath.org/OpenMath"><theory name="FilteredAlgebras" base="http://www.sagemath.org/content/categories/filtered_algebras" meta="http://www.sagemath.org/?Types"><import from="http://www.sagemath.org/?Axioms"></import><import from="http://www.sagemath.org/?Structures"></import><import from="http://www.sagemath.org/content/categories/algebras?Algebras"></import><import from="http://www.sagemath.org/content/categories/filtered_modules?FilteredModules"></import><document name="Element Methods"><opaque format="text">
    The category of filtered algebras.

    An algebra `A` over a commutative ring `R` is *filtered* if
    `A` is endowed with a structure of a filtered `R`-module
    (whose underlying `R`-module structure is identical with
    that of the `R`-algebra `A`) such that the indexing set `I`
    (typically `I = \NN`) is also an additive abelian monoid,
    the unity `1` of `A` belongs to `F_0`, and we have
    `F_i \cdot F_j \subseteq F_{i+j}` for all `i, j \in I`.

    EXAMPLES::

        sage: Algebras(ZZ).Filtered()
        Category of filtered algebras over Integer Ring
        sage: Algebras(ZZ).Filtered().super_categories()
        [Category of algebras over Integer Ring,
         Category of filtered modules over Integer Ring]

    TESTS::

        sage: TestSuite(Algebras(ZZ).Filtered()).run()

    REFERENCES:

    - :wikipedia:`Filtered_algebra`
    </opaque></document><document name="Morphism Methods:"><opaque format="text">
    The category of filtered algebras.

    An algebra `A` over a commutative ring `R` is *filtered* if
    `A` is endowed with a structure of a filtered `R`-module
    (whose underlying `R`-module structure is identical with
    that of the `R`-algebra `A`) such that the indexing set `I`
    (typically `I = \NN`) is also an additive abelian monoid,
    the unity `1` of `A` belongs to `F_0`, and we have
    `F_i \cdot F_j \subseteq F_{i+j}` for all `i, j \in I`.

    EXAMPLES::

        sage: Algebras(ZZ).Filtered()
        Category of filtered algebras over Integer Ring
        sage: Algebras(ZZ).Filtered().super_categories()
        [Category of algebras over Integer Ring,
         Category of filtered modules over Integer Ring]

    TESTS::

        sage: TestSuite(Algebras(ZZ).Filtered()).run()

    REFERENCES:

    - :wikipedia:`Filtered_algebra`
    </opaque></document><document name="Parent Methods:"><constant name="parent.graded_algebra">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
            Return the associated graded algebra to ``self``.

            .. TODO::

                Implement a version of the associated graded algebra
                which does not require ``self`` to have a
                distinguished basis.

            EXAMPLES::

                sage: A = AlgebrasWithBasis(ZZ).Filtered().example()
                sage: A.graded_algebra()
                Graded Algebra of An example of a filtered algebra with basis:
                 the universal enveloping algebra of
                 Lie algebra of RR^3 with cross product over Integer Ring
            </opaque></document><document name="Subcategory Methods:"><opaque format="text">
    The category of filtered algebras.

    An algebra `A` over a commutative ring `R` is *filtered* if
    `A` is endowed with a structure of a filtered `R`-module
    (whose underlying `R`-module structure is identical with
    that of the `R`-algebra `A`) such that the indexing set `I`
    (typically `I = \NN`) is also an additive abelian monoid,
    the unity `1` of `A` belongs to `F_0`, and we have
    `F_i \cdot F_j \subseteq F_{i+j}` for all `i, j \in I`.

    EXAMPLES::

        sage: Algebras(ZZ).Filtered()
        Category of filtered algebras over Integer Ring
        sage: Algebras(ZZ).Filtered().super_categories()
        [Category of algebras over Integer Ring,
         Category of filtered modules over Integer Ring]

    TESTS::

        sage: TestSuite(Algebras(ZZ).Filtered()).run()

    REFERENCES:

    - :wikipedia:`Filtered_algebra`
    </opaque></document></theory></omdoc>