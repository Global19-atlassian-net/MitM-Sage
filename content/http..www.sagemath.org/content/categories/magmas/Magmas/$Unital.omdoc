<omdoc xmlns="http://omdoc.org/ns" xmlns:om="http://www.openmath.org/OpenMath"><theory name="Unital" base="http://www.sagemath.org/content/categories/magmas/Magmas" meta="http://www.sagemath.org/?Types"><import from="http://www.sagemath.org/?Axioms"></import><import from="http://www.sagemath.org/?Structures"></import><import from="http://www.sagemath.org/content/categories/magmas?Magmas"></import><constant name="Unital">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="apply"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="ded"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Axioms" name="Unital"></om:OMS>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><constant name="sage.categories.magmas.Magmas.Unital">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="apply"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="structureof"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Structures" name="sage.categories.magmas.Magmas.Unital"></om:OMS>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><document name="Element Methods"><constant name="element.__div__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">__truediv__(left, right)
File: sage/categories/coercion_methods.pyx (starting at line 248)

    Return the result of the division of ``left`` by ``right``, if possible.

    This top-level implementation delegates the work to
    the ``_div_`` method if ``left`` and ``right`` have
    the same parent and to coercion otherwise. See the
    extensive documentation at the top of
    :ref:`sage.structure.element`.

    INPUT:

    - ``self`` -- an element of a :class:`unital magma &lt;Magmas.Unital&gt;`
    - ``right`` -- an object

    .. SEEALSO:: :meth:`Magmas.Unital.ElementMethods._div_`

    EXAMPLES::

        sage: G = FreeGroup(2)
        sage: x0, x1 = G.group_generators()
        sage: c1 = cartesian_product([x0, x1])
        sage: c2 = cartesian_product([x1, x0])
        sage: c1.__div__(c2)
        (x0*x1^-1, x1*x0^-1)
        sage: c1 / c2
        (x0*x1^-1, x1*x0^-1)

    Division supports coercion::

        sage: C = cartesian_product([G, G])
        sage: H = Hom(G, C)
        sage: phi = H(lambda g: cartesian_product([g, g]))
        sage: phi.register_as_coercion()
        sage: x1 / c1
        (x1*x0^-1, 1)
        sage: c1 / x1
        (x0*x1^-1, 1)

    Depending on how the division itself is implemented in
    ``_div_``, division may fail even when ``right``
    actually divides ``left``::

        sage: x = cartesian_product([2, 1])
        sage: y = cartesian_product([1, 1])
        sage: x / y
        (2, 1)
        sage: x / x
        Traceback (most recent call last):
        ...
        TypeError: no conversion of this rational to integer

    This is :meth:`Magmas.Unital.ElementMethods.__truediv__`, implemented
    as a Cython method in :mod:`sage.categories.coercion_methods`::

        sage: x.__truediv__.im_func is Magmas.Unital.ElementMethods.__truediv__.im_func
        True
        sage: x.__truediv__.im_func is sage.categories.coercion_methods.__truediv__
        True
    </opaque><constant name="element.__invert__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text"></opaque><constant name="element.__truediv__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">__truediv__(left, right)
File: sage/categories/coercion_methods.pyx (starting at line 248)

    Return the result of the division of ``left`` by ``right``, if possible.

    This top-level implementation delegates the work to
    the ``_div_`` method if ``left`` and ``right`` have
    the same parent and to coercion otherwise. See the
    extensive documentation at the top of
    :ref:`sage.structure.element`.

    INPUT:

    - ``self`` -- an element of a :class:`unital magma &lt;Magmas.Unital&gt;`
    - ``right`` -- an object

    .. SEEALSO:: :meth:`Magmas.Unital.ElementMethods._div_`

    EXAMPLES::

        sage: G = FreeGroup(2)
        sage: x0, x1 = G.group_generators()
        sage: c1 = cartesian_product([x0, x1])
        sage: c2 = cartesian_product([x1, x0])
        sage: c1.__div__(c2)
        (x0*x1^-1, x1*x0^-1)
        sage: c1 / c2
        (x0*x1^-1, x1*x0^-1)

    Division supports coercion::

        sage: C = cartesian_product([G, G])
        sage: H = Hom(G, C)
        sage: phi = H(lambda g: cartesian_product([g, g]))
        sage: phi.register_as_coercion()
        sage: x1 / c1
        (x1*x0^-1, 1)
        sage: c1 / x1
        (x0*x1^-1, 1)

    Depending on how the division itself is implemented in
    ``_div_``, division may fail even when ``right``
    actually divides ``left``::

        sage: x = cartesian_product([2, 1])
        sage: y = cartesian_product([1, 1])
        sage: x / y
        (2, 1)
        sage: x / x
        Traceback (most recent call last):
        ...
        TypeError: no conversion of this rational to integer

    This is :meth:`Magmas.Unital.ElementMethods.__truediv__`, implemented
    as a Cython method in :mod:`sage.categories.coercion_methods`::

        sage: x.__truediv__.im_func is Magmas.Unital.ElementMethods.__truediv__.im_func
        True
        sage: x.__truediv__.im_func is sage.categories.coercion_methods.__truediv__
        True
    </opaque><constant name="element._div_">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
                Default implementation of division, multiplying (on the right) by the inverse.

                INPUT:

                - ``left``, ``right`` -- two elements of the same unital magma

                .. SEEALSO:: :meth:`__div__`

                EXAMPLES::

                    sage: G = FreeGroup(2)
                    sage: x0, x1 = G.group_generators()
                    sage: c1 = cartesian_product([x0, x1])
                    sage: c2 = cartesian_product([x1, x0])
                    sage: c1._div_(c2)
                    (x0*x1^-1, x1*x0^-1)

                With this implementation, division will fail as soon
                as ``right`` is not invertible, even if ``right``
                actually divides ``left``::

                    sage: x = cartesian_product([2, 1])
                    sage: y = cartesian_product([1, 1])
                    sage: x / y
                    (2, 1)
                    sage: x / x
                    Traceback (most recent call last):
                    ...
                    TypeError: no conversion of this rational to integer

                TESTS::

                    sage: c1._div_.__module__
                    'sage.categories.magmas'
                </opaque></document><document name="Morphism Methods:"></document><document name="Parent Methods:"><constant name="parent._test_one">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
                Test that ``self.one()`` is an element of ``self`` and is
                neutral for the operation ``*``.

                INPUT:

                - ``options`` -- any keyword arguments accepted by :meth:`_tester`

                EXAMPLES:

                By default, this method tests only the elements returned by
                ``self.some_elements()``::

                    sage: S = Monoids().example()
                    sage: S._test_one()

                However, the elements tested can be customized with the
                ``elements`` keyword argument::

                    sage: S._test_one(elements = (S('a'), S('b')))

                See the documentation for :class:`TestSuite` for more information.
                </opaque><constant name="parent.is_empty">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
                Return whether ``self`` is empty.

                Since this set is a unital magma it is not empty and this method
                always return ``False``.

                EXAMPLES::

                    sage: S = SymmetricGroup(2)
                    sage: S.is_empty()
                    False

                    sage: M = Monoids().example()
                    sage: M.is_empty()
                    False

                TESTS::

                    sage: S.is_empty.__module__
                    'sage.categories.magmas'
                    sage: M.is_empty.__module__
                    'sage.categories.magmas'
                </opaque><constant name="parent.one">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text"></opaque></document><document name="Subcategory Methods:"><constant name="subcategory.__div__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">__truediv__(left, right)
File: sage/categories/coercion_methods.pyx (starting at line 248)

    Return the result of the division of ``left`` by ``right``, if possible.

    This top-level implementation delegates the work to
    the ``_div_`` method if ``left`` and ``right`` have
    the same parent and to coercion otherwise. See the
    extensive documentation at the top of
    :ref:`sage.structure.element`.

    INPUT:

    - ``self`` -- an element of a :class:`unital magma &lt;Magmas.Unital&gt;`
    - ``right`` -- an object

    .. SEEALSO:: :meth:`Magmas.Unital.ElementMethods._div_`

    EXAMPLES::

        sage: G = FreeGroup(2)
        sage: x0, x1 = G.group_generators()
        sage: c1 = cartesian_product([x0, x1])
        sage: c2 = cartesian_product([x1, x0])
        sage: c1.__div__(c2)
        (x0*x1^-1, x1*x0^-1)
        sage: c1 / c2
        (x0*x1^-1, x1*x0^-1)

    Division supports coercion::

        sage: C = cartesian_product([G, G])
        sage: H = Hom(G, C)
        sage: phi = H(lambda g: cartesian_product([g, g]))
        sage: phi.register_as_coercion()
        sage: x1 / c1
        (x1*x0^-1, 1)
        sage: c1 / x1
        (x0*x1^-1, 1)

    Depending on how the division itself is implemented in
    ``_div_``, division may fail even when ``right``
    actually divides ``left``::

        sage: x = cartesian_product([2, 1])
        sage: y = cartesian_product([1, 1])
        sage: x / y
        (2, 1)
        sage: x / x
        Traceback (most recent call last):
        ...
        TypeError: no conversion of this rational to integer

    This is :meth:`Magmas.Unital.ElementMethods.__truediv__`, implemented
    as a Cython method in :mod:`sage.categories.coercion_methods`::

        sage: x.__truediv__.im_func is Magmas.Unital.ElementMethods.__truediv__.im_func
        True
        sage: x.__truediv__.im_func is sage.categories.coercion_methods.__truediv__
        True
    </opaque><constant name="subcategory.__invert__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text"></opaque><constant name="subcategory.__truediv__">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">__truediv__(left, right)
File: sage/categories/coercion_methods.pyx (starting at line 248)

    Return the result of the division of ``left`` by ``right``, if possible.

    This top-level implementation delegates the work to
    the ``_div_`` method if ``left`` and ``right`` have
    the same parent and to coercion otherwise. See the
    extensive documentation at the top of
    :ref:`sage.structure.element`.

    INPUT:

    - ``self`` -- an element of a :class:`unital magma &lt;Magmas.Unital&gt;`
    - ``right`` -- an object

    .. SEEALSO:: :meth:`Magmas.Unital.ElementMethods._div_`

    EXAMPLES::

        sage: G = FreeGroup(2)
        sage: x0, x1 = G.group_generators()
        sage: c1 = cartesian_product([x0, x1])
        sage: c2 = cartesian_product([x1, x0])
        sage: c1.__div__(c2)
        (x0*x1^-1, x1*x0^-1)
        sage: c1 / c2
        (x0*x1^-1, x1*x0^-1)

    Division supports coercion::

        sage: C = cartesian_product([G, G])
        sage: H = Hom(G, C)
        sage: phi = H(lambda g: cartesian_product([g, g]))
        sage: phi.register_as_coercion()
        sage: x1 / c1
        (x1*x0^-1, 1)
        sage: c1 / x1
        (x0*x1^-1, 1)

    Depending on how the division itself is implemented in
    ``_div_``, division may fail even when ``right``
    actually divides ``left``::

        sage: x = cartesian_product([2, 1])
        sage: y = cartesian_product([1, 1])
        sage: x / y
        (2, 1)
        sage: x / x
        Traceback (most recent call last):
        ...
        TypeError: no conversion of this rational to integer

    This is :meth:`Magmas.Unital.ElementMethods.__truediv__`, implemented
    as a Cython method in :mod:`sage.categories.coercion_methods`::

        sage: x.__truediv__.im_func is Magmas.Unital.ElementMethods.__truediv__.im_func
        True
        sage: x.__truediv__.im_func is sage.categories.coercion_methods.__truediv__
        True
    </opaque><constant name="subcategory._div_">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMBIND>
                 <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="Pi"></om:OMS>
                 <om:OMBVAR><om:OMV name="_"><type><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS></type></om:OMV></om:OMBVAR>
                 <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMBIND>
      </om:OMBIND></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
                Default implementation of division, multiplying (on the right) by the inverse.

                INPUT:

                - ``left``, ``right`` -- two elements of the same unital magma

                .. SEEALSO:: :meth:`__div__`

                EXAMPLES::

                    sage: G = FreeGroup(2)
                    sage: x0, x1 = G.group_generators()
                    sage: c1 = cartesian_product([x0, x1])
                    sage: c2 = cartesian_product([x1, x0])
                    sage: c1._div_(c2)
                    (x0*x1^-1, x1*x0^-1)

                With this implementation, division will fail as soon
                as ``right`` is not invertible, even if ``right``
                actually divides ``left``::

                    sage: x = cartesian_product([2, 1])
                    sage: y = cartesian_product([1, 1])
                    sage: x / y
                    (2, 1)
                    sage: x / x
                    Traceback (most recent call last):
                    ...
                    TypeError: no conversion of this rational to integer

                TESTS::

                    sage: c1._div_.__module__
                    'sage.categories.magmas'
                </opaque></document></theory></omdoc>