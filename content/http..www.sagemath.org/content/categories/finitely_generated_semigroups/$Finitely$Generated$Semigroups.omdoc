<omdoc xmlns="http://omdoc.org/ns" xmlns:om="http://www.openmath.org/OpenMath"><theory name="FinitelyGeneratedSemigroups" base="http://www.sagemath.org/content/categories/finitely_generated_semigroups" meta="http://www.sagemath.org/?Types"><import from="http://www.sagemath.org/?Axioms"></import><import from="http://www.sagemath.org/?Structures"></import><import from="http://www.sagemath.org/content/categories/semigroups?Semigroups"></import><import from="http://www.sagemath.org/content/categories/finitely_generated_magmas?FinitelyGeneratedMagmas"></import><import from="http://www.sagemath.org/content/categories/enumerated_sets?EnumeratedSets"></import><omdoc name="Parent Methods"><constant name="parent.ideal">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMA>
      </om:OMA>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
            Return the ``side``-sided ideal generated by ``gens``.

            This brute force implementation recursively multiplies the
            elements of ``gens`` by the distinguished generators of
            this semigroup.

            .. SEEALSO:: :meth:`semigroup_generators`

            INPUT:

            - ``gens`` -- a list (or iterable) of elements of ``self``
            - ``side`` -- [default: &quot;twosided&quot;] &quot;left&quot;, &quot;right&quot; or &quot;twosided&quot;

            EXAMPLES::

                sage: S = FiniteSemigroups().example()
                sage: list(S.ideal([S('cab')], side=&quot;left&quot;))
                ['cab', 'acb', 'dcab', 'bca', 'abc', 'adcb', 'bdca',
                 'cba', 'cdab', 'bac', 'dacb', 'dbca', 'adbc', 'bcda',
                 'dbac', 'dabc', 'cbda', 'cdba', 'abdc', 'bdac', 'dcba',
                 'cadb', 'badc', 'acdb', 'abcd', 'cbad', 'bacd', 'acbd',
                 'bcad', 'cabd']
                sage: list(S.ideal([S('cab')], side=&quot;right&quot;))
                ['cab', 'cabd']
                sage: list(S.ideal([S('cab')], side=&quot;twosided&quot;))
                ['cab', 'acb', 'dcab', 'bca', 'cabd', 'abc', 'adcb',
                 'acbd', 'bdca', 'bcad', 'cba', 'cdab', 'bac', 'dacb',
                 'dbca', 'abcd', 'cbad', 'bacd', 'bcda', 'dbac', 'dabc',
                 'cbda', 'cdba', 'abdc', 'adbc', 'bdac', 'dcba', 'cadb',
                 'badc', 'acdb']
                sage: list(S.ideal([S('cab')]))
                ['cab', 'acb', 'dcab', 'bca', 'cabd', 'abc', 'adcb',
                 'acbd', 'bdca', 'bcad', 'cba', 'cdab', 'bac', 'dacb',
                 'dbca', 'abcd', 'cbad', 'bacd', 'bcda', 'dbac', 'dabc',
                 'cbda', 'cdba', 'abdc', 'adbc', 'bdac', 'dcba', 'cadb',
                 'badc', 'acdb']
            </opaque><constant name="parent.succ_generators">
       
       <type><om:OMOBJ xmlns:om="http://www.openmath.org/OpenMath"><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMA>
              <om:OMS base="http://cds.omdoc.org/urtheories" module="LambdaPi" name="arrow"></om:OMS>
              <om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS><om:OMS base="http://www.sagemath.org/" module="Types" name="object"></om:OMS>
      </om:OMA>
      </om:OMA></om:OMOBJ></type>
       
       
     </constant><opaque format="text">
            Return the successor function of the ``side``-sided Cayley
            graph of ``self``.

            This is a function that maps an element of ``self`` to all
            the products of ``x`` by a generator of this semigroup,
            where the product is taken on the left, right, or both
            sides.

            INPUT:

            - ``side``: &quot;left&quot;, &quot;right&quot;, or &quot;twosided&quot;

            .. TODO:: Design choice:

               - find a better name for this method
               - should we return a set? a family?

            EXAMPLES::

                sage: S = FiniteSemigroups().example()
                sage: S.succ_generators(&quot;left&quot; )(S('ca'))
                ('ac', 'bca', 'ca', 'dca')
                sage: S.succ_generators(&quot;right&quot;)(S('ca'))
                ('ca', 'cab', 'ca', 'cad')
                sage: S.succ_generators(&quot;twosided&quot; )(S('ca'))
                ('ac', 'bca', 'ca', 'dca', 'ca', 'cab', 'ca', 'cad')

            </opaque></omdoc></theory></omdoc>